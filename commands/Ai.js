const axios = require('axios');

module.exports = {
  name: 'ai',
  description: 'Pose une question √† AIchat',
  author: 'Deku (rest api)',
  hasPrefix: false, // Le bot √©coutera les messages sans avoir besoin d'un pr√©fixe
  async execute(senderId, args, pageAccessToken, sendMessage) {
    const prompt = args.join(' ');

    if (!prompt) {
      return sendMessage(senderId, { text: "Veuillez entrer une question valide." }, pageAccessToken);
    }

    try {
      // Envoyer un message indiquant que AIchat est en train de r√©pondre
      await sendMessage(senderId, { text: 'üí¨AIchat est en train de te r√©pondre ‚è≥...\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ' }, pageAccessToken);

      // URL de l'API AIchat
      const apiUrl = `https://www.samirxpikachu.run.place/gemini?text=${encodeURIComponent(prompt)}&system=default&uid=${senderId}`;
      const response = await axios.get(apiUrl);

      const { candidates } = response.data;

      if (candidates && candidates.length > 0) {
        const replyText = candidates[0].content.parts[0].text;

        // Cr√©er un style avec un contour pour la r√©ponse de AIchat
        const formattedResponse = `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
                                  `‚ú®üåèAIchatüá≤üá¨\n\n${replyText}\n` +
                                  `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

        // G√©rer les r√©ponses longues de plus de 2000 caract√®res
        const maxMessageLength = 2000;
        if (formattedResponse.length > maxMessageLength) {
          const chunks = splitMessageIntoChunks(formattedResponse, maxMessageLength);
          for (const chunk of chunks) {
            await sendMessage(senderId, { text: chunk }, pageAccessToken);
          }
        } else {
          await sendMessage(senderId, { text: formattedResponse }, pageAccessToken);
        }
      } else {
        await sendMessage(senderId, { text: 'D√©sol√©, aucune r√©ponse de AIchat.' }, pageAccessToken);
      }

    } catch (error) {
      console.error('Error calling AI API:', error);
      // Message de r√©ponse d'erreur
      await sendMessage(senderId, { text: 'D√©sol√©, une erreur est survenue. Veuillez r√©essayer plus tard.' }, pageAccessToken);
    }
  }
};

// Fonction pour d√©couper les messages en morceaux de 2000 caract√®res
function splitMessageIntoChunks(message, chunkSize) {
  const chunks = [];
  for (let i = 0; i < message.length; i += chunkSize) {
    chunks.push(message.slice(i, i + chunkSize));
  }
  return chunks;
}
